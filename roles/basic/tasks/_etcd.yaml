---

# ===============
# Setting up etcd
# ===============
- name: promise etcd user
  user: name=etcd system=yes state=present

- name: promise etcd path
  file: path={{ETCD_DIR}} state=directory recurse=yes owner=etcd group=etcd

- name: clear previous cluster info if exsits
  file: path={{ETCD_DATA_DIR}} state=absent

- name: promise etcd cluster info path
  file: path={{ETCD_DATA_DIR}} state=directory recurse=yes owner=etcd group=etcd

- name: promise etcd tls/ssl path
  file: path={{ETCD_DIR}}{{ETCD_VERSION}}/ssl/ state=directory recurse=yes owner=etcd group=etcd

- name: copy etcd server certificates
  copy: src=ssl/etcd/_ssl/{{item}} dest={{ETCD_DIR}}{{ETCD_VERSION}}/ssl/{{item}} owner=etcd group=etcd mode=0600
  with_items:
    - ca.pem
    - server.pem
    - server-key.pem
    #- "{{ansible_eth0.ipv4.address}}-peer.pem"
    #- "{{ansible_eth0.ipv4.address}}-peer-key.pem"

- name: copy etcd client.pem
  copy: src=ssl/etcd/_ssl/{{item}} dest={{ETCD_DIR}}{{ETCD_VERSION}}/ssl/{{item}} owner=root group=root mode=0644
  with_items:
    - client.pem
    - client-key.pem

- name: check etcd exists
  stat:
    path: "{{ETCD_DIR}}/etcd-v{{ETCD_VERSION}}-linux-amd64"
  register: etcddir

- name: Obtain etcd
  unarchive:
    src: "https://github.com/coreos/etcd/releases/download/v{{ETCD_VERSION}}/etcd-v{{ETCD_VERSION}}-linux-amd64.tar.gz"
    dest: "{{ETCD_DIR}}"
    remote_src: yes
    owner: etcd
    group: etcd
  when: etcddir.stat.exists == False or etcddir.stat.isdir == False

- name: Config etcd service
  template: src=etcd.service.j2 dest=/lib/systemd/system/etcd.service owner=root group=root mode=0644

- name: Config etcd and etcdctl options
  template: src={{item}}.cnf.j2 dest=/etc/default/{{item}} owner=root group=root mode=0644
  with_items:
    - etcd
    - etcdctl

- name: Start/Restart etcd service
  systemd: name=etcd state=restarted daemon_reload=yes enabled=yes
