# The basic role install all necessaary pacakges for all host (ubuntu16.04)
# ex:
#   - etcd
#     * This is service/peer discovery and distributed key-value system.
#     * service would be setup to served directly.
#   - flannel
#     * This is tool to create virtual network for docker across host
#     * service WON'T be run after this roles played
#   - docker
#     * Docker daemon
#     * Run default config without flannel
#   - kubernetes source and executable
#     * Download kubernetes source and setup executable files
---

# ===============
# Setting up etcd
# ===============
- name: promise etcd user
  user: name=etcd system=yes state=present

- name: promise etcd path
  file: path={{ETCD_DIR}} state=directory recurse=yes owner=etcd group=etcd

- name: promise etcd data path
  file: path={{ETCD_DATA_DIR}} state=directory recurse=yes owner=etcd group=etcd

- name: check etcd exists
  stat:
    path: "{{ETCD_DIR}}/etcd-v{{ETCD_VERSION}}-linux-amd64"
  register: etcddir

- name: Obtain etcd
  unarchive:
    src: "https://github.com/coreos/etcd/releases/download/v{{ETCD_VERSION}}/etcd-v{{ETCD_VERSION}}-linux-amd64.tar.gz"
    dest: "{{ETCD_DIR}}"
    remote_src: yes
    owner: etcd
    group: etcd
  when: etcddir.stat.exists == False or etcddir.stat.isdir == False

- name: Config etcd service
  template: src=etcd.service.j2 dest=/lib/systemd/system/etcd.service owner=root group=root mode=0644

- name: Config etcd options
  template: src=etcd.cnf.j2 dest=/etc/default/etcd owner=root group=root mode=0644

- name: Start/Restart etcd service
  systemd: name=etcd state=restarted daemon_reload=yes

# ==================
# Setting up flannel
# ==================
- name: promise flannel user
  user: name=flannel system=yes state=present

- name: promise flannel path
  file: path={{FLANNEL_DIR}} state=directory recurse=yes owner=flannel group=flannel

- name: check flannel exists
  stat:
    path: "{{FLANNEL_DIR}}{{FLANNEL_VERSION}}"
  register: flldir

- name: Promise version folder
  file: path={{FLANNEL_DIR}}{{FLANNEL_VERSION}} state=directory recurse=yes owner=flannel group=flannel
  when: flldir.stat.exists == False or flldir.stat.isdir == False

- name: Obtain flannel
  unarchive:
    src: "https://github.com/coreos/flannel/releases/download/v{{FLANNEL_VERSION}}/flannel-v{{FLANNEL_VERSION}}-linux-amd64.tar.gz"
    dest: "{{FLANNEL_DIR}}{{FLANNEL_VERSION}}"
    remote_src: yes
    owner: flannel
    group: flannel
  when: flldir.stat.exists == False or flldir.stat.isdir == False

- name: Config flannel service
  template: src=flanneld.service.j2 dest=/lib/systemd/system/flanneld.service owner=root group=root mode=0644

#- name: Start/Restart flannel service
#  systemd: name=flanneld state=restarted daemon_reload=yes

# ============
# setup Docker
# ============

- name: Update apt
  apt: update_cache=yes

- name: Install HTTPS and CA
  apt: name={{ item }} state=present
  with_items:
    - apt-transport-https
    - ca-certificates

- name: Add key
  apt_key: keyserver=hkp://ha.pool.sks-keyservers.net:80 id=58118E89F3A912897C070ADBF76221572C52609D

- name: Add repository
  apt_repository: repo='deb https://apt.dockerproject.org/repo ubuntu-xenial main' state=present filename=docker

- name: Update apt again
  apt: update_cache=yes

#- name: Install kernel
#  command: /usr/bin/apt install -y 'linux-image-extra-$(uname -r)'

- name: Install linux virtual tool
  apt: name=linux-image-extra-virtual state=present

- name: Install docker engine
  apt: name=docker-engine state=present

- name: start service
  systemd: name=docker state=restarted

# =======================
# Download k8s executable
# =======================

- name: promise k8s path
  file: path={{K8S_DIR}} state=directory recurse=yes owner=root group=root

- name: check k8s version exists
  stat:
    path: "{{K8S_DIR}}{{K8S_VERSION}}"
  register: k8svdir

- name: Obtain k8s source
  unarchive:
    src: "https://github.com/kubernetes/kubernetes/releases/download/v{{K8S_VERSION}}/kubernetes.tar.gz"
    dest: "/tmp"
    owner: root
    group: root
    remote_src: yes
  when: k8svdir.stat.exists == False or k8svdir.stat.isdir == False

- name: promise k8s version path
  file: path={{K8S_DIR}}{{K8S_VERSION}} state=directory recurse=yes owner=root group=root
  when: k8svdir.stat.exists == False or k8svdir.stat.isdir == False

- name: Setup k8s executable
  unarchive:
    src: "/tmp/kubernetes/server/kubernetes-server-linux-amd64.tar.gz"
    dest: "{{K8S_DIR}}{{K8S_VERSION}}"
    owner: root
    group: root
    remote_src: yes
  when: k8svdir.stat.exists == False or k8svdir.stat.isdir == False

#- name: check and generate k8s private key
#  #hosts: localhost
#  openssl_privatekey:
#    path: "certs/k8s_private.pem"
#
#- name: check and generate k8s public key
#  #hosts: localhost
#  openssl_publickey:
#    path: "certs/k8s_public.pem"
#    privatekey_path: "certs/k8s_private.pem"
