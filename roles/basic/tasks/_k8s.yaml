---

# =======================
# Download k8s executable
# =======================

- name: promise k8s path
  file: path={{K8S_DIR}} state=directory recurse=yes owner=root group=root

- name: check k8s version exists
  stat:
    path: "{{K8S_DIR}}{{K8S_VERSION}}/kubernetes/server"
  register: k8svdir

- name: promise k8s version path
  file: path={{K8S_DIR}}{{K8S_VERSION}} state=directory recurse=yes owner=root group=root
  when: k8svdir.stat.exists == False or k8svdir.stat.isdir == False

- name: Obtain k8s source
  unarchive:
    src: "https://github.com/kubernetes/kubernetes/releases/download/v{{K8S_VERSION}}/kubernetes.tar.gz"
    dest: "/tmp"
    owner: root
    group: root
    remote_src: yes
  when: K8S_OBTAIN_REMOTE == 1 and (k8svdir.stat.exists == False or k8svdir.stat.isdir == False)

- name: Setup k8s executable
  unarchive:
    src: "/tmp/kubernetes/server/kubernetes-server-linux-amd64.tar.gz"
    dest: "{{K8S_DIR}}{{K8S_VERSION}}"
    owner: root
    group: root
    remote_src: yes
  when: K8S_OBTAIN_REMOTE == 1 and (k8svdir.stat.exists == False or k8svdir.stat.isdir == False)

- name: Clean k8s tmp
  file:  path=/tmp/kubernetes state=absent
  when: K8S_OBTAIN_REMOTE == 1 and (k8svdir.stat.exists == False or k8svdir.stat.isdir == False)

- name: Setup k8s executable from local
  unarchive:
    src: "/tmp/kubernetes/server/kubernetes-server-linux-amd64.tar.gz"
    dest: "{{K8S_DIR}}{{K8S_VERSION}}"
    owner: root
    group: root
  when: K8S_OBTAIN_REMOTE == 0 and (k8svdir.stat.exists == False or k8svdir.stat.isdir == False)

- name: Config kube-proxy service on all nodes
  template:
    src: kube-proxy.service.j2
    dest: /lib/systemd/system/kube-proxy.service
    owner: root
    group: root
    mode: 0644
